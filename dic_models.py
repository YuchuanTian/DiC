try:
    import torch_npu # for running on ascend 910
    dv_type = 'npu'
except:
    dv_type = 'cuda'
import torch
import torch.nn as nn
import numpy as np
import math
import torch.nn.functional as F
# from timm.models.vision_transformer import PatchEmbed
# from timm.models.layers import LayerNorm2d
import warnings
from functools import partial


# from torchprofile import profile_macs
from einops import rearrange
import einops


class LayerNorm2d(nn.LayerNorm):
    def __init__(self, num_channels, eps=1e-6, affine=True):
        super().__init__(num_channels, eps=eps, elementwise_affine=affine)

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        x = x.permute(0, 2, 3, 1)
        x = F.layer_norm(x, self.normalized_shape, self.weight, self.bias, self.eps)
        x = x.permute(0, 3, 1, 2)
        return x

class GroupNorm(nn.Module):
    def __init__(self, num_channels, num_groups=32, min_channels_per_group=4, eps=1e-5):
        super().__init__()
        self.num_groups = min(num_groups, num_channels // min_channels_per_group)
        self.eps = eps
        self.weight = nn.Parameter(torch.ones(num_channels))
        self.bias = nn.Parameter(torch.zeros(num_channels))

    def forward(self, x):
        return F.group_norm(x, num_groups=self.num_groups, weight=self.weight.to(x.dtype), bias=self.bias.to(x.dtype), eps=self.eps)
    
    def extra_repr(self) -> str:
        return f"dim={self.weight.numel()}; group={self.num_groups}"



def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # From: https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/layers/weight_init.py
    # Cut & paste from Pytorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn(
            'mean is more than 2 std from [a, b] in nn.init.trunc_normal_. '
            'The distribution of values may be incorrect.',
            stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        low = norm_cdf((a - mean) / std)
        up = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [low, up], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * low - 1, 2 * up - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution.

    From: https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/layers/weight_init.py

    The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.

    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value

    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)

def modulate(x, shift, scale):
    return x * (1 + scale.unsqueeze(-1).unsqueeze(-1)) + shift.unsqueeze(-1).unsqueeze(-1)

#################################################################################
#               Embedding Layers for Timesteps and Class Labels                 #
#################################################################################

class TimestepEmbedder(nn.Module):
    """
    Embeds scalar timesteps into vector representations.
    """
    def __init__(self, hidden_size, frequency_embedding_size=256):
        super().__init__()
        self.mlp = nn.Sequential(
            nn.Linear(frequency_embedding_size, hidden_size,bias=True),
            nn.SiLU(),
            nn.Linear(hidden_size, hidden_size, bias=True),
        )
        self.frequency_embedding_size = frequency_embedding_size

    @staticmethod
    def timestep_embedding(t, dim, max_period=10000):
        """
        Create sinusoidal timestep embeddings.
        :param t: a 1-D Tensor of N indices, one per batch element.
                          These may be fractional.
        :param dim: the dimension of the output.
        :param max_period: controls the minimum frequency of the embeddings.
        :return: an (N, D) Tensor of positional embeddings.
        """
        # https://github.com/openai/glide-text2im/blob/main/glide_text2im/nn.py
        half = dim // 2
        freqs = torch.exp(
            -math.log(max_period) * torch.arange(start=0, end=half, dtype=torch.float32) / half
        ).to(device=t.device)
        args = t[:, None].float() * freqs[None]
        embedding = torch.cat([torch.cos(args), torch.sin(args)], dim=-1)
        if dim % 2:
            embedding = torch.cat([embedding, torch.zeros_like(embedding[:, :1])], dim=-1)
        return embedding

    def forward(self, t):
        t_freq = self.timestep_embedding(t, self.frequency_embedding_size)
        t_emb = self.mlp(t_freq)
        return t_emb


class LabelEmbedder(nn.Module):
    """
    Embeds class labels into vector representations. Also handles label dropout for classifier-free guidance.
    """
    def __init__(self, num_classes, hidden_size, dropout_prob):
        super().__init__()
        use_cfg_embedding = dropout_prob > 0
        self.embedding_table = nn.Embedding(num_classes + use_cfg_embedding, hidden_size)
        self.num_classes = num_classes
        self.dropout_prob = dropout_prob

    def token_drop(self, labels, force_drop_ids=None):
        """
        Drops labels to enable classifier-free guidance.
        """
        if force_drop_ids is None:
            drop_ids = torch.rand(labels.shape[0], device=labels.device) < self.dropout_prob
        else:
            drop_ids = force_drop_ids == 1
        labels = torch.where(drop_ids, self.num_classes, labels)
        return labels

    def forward(self, labels, train, force_drop_ids=None):
        use_dropout = self.dropout_prob > 0
        if (train and use_dropout) or (force_drop_ids is not None):
            labels = self.token_drop(labels, force_drop_ids)
        embeddings = self.embedding_table(labels)
        return embeddings, labels

class FinalLayer(nn.Module):
    """
    The final layer of DiT.
    """
    def __init__(self, hidden_size, out_channels):
        super().__init__()
        self.norm_final = LayerNorm2d(hidden_size, affine=False, eps=1e-6)
        self.out_proj = nn.Conv2d(hidden_size, out_channels, kernel_size=3, stride=1, padding=1, bias=True)
        self.adaLN_modulation = nn.Sequential(
            nn.SiLU(),
            nn.Linear(hidden_size, 2 * hidden_size, bias=True)
        )

    def forward(self, x, c):
        shift, scale = self.adaLN_modulation(c).chunk(2, dim=1)
        x = modulate(self.norm_final(x), shift, scale)
        x = self.out_proj(x)
        return x

class OverlapPatchEmbed(nn.Module):
    def __init__(self, in_c=3, embed_dim=48, bias=False):
        super(OverlapPatchEmbed, self).__init__()

        self.proj = nn.Conv2d(in_c, embed_dim, kernel_size=3, stride=1, padding=1, bias=bias)

    def forward(self, x):
        x = self.proj(x)

        return x


class Downsample(nn.Module):
    def __init__(self, n_feat, out_feat):
        super(Downsample, self).__init__()

        self.body = nn.Sequential(nn.Conv2d(n_feat, out_feat // 4, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.PixelUnshuffle(2))

    def forward(self, x):
        return self.body(x)

class Upsample(nn.Module):
    def __init__(self, n_feat, out_feat):
        super(Upsample, self).__init__()

        self.body = nn.Sequential(nn.Conv2d(n_feat, out_feat * 4, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.PixelShuffle(2))

    def forward(self, x):
        return self.body(x)
    


class UNetBlock(torch.nn.Module):
    def __init__(self,
        in_channels, out_channels, emb_channels=None, dropout=0, skip_scale=1, eps=1e-5,
        resample_filter=[1,1], resample_proj=False, adaptive_scale=1, blockconfig=0, actfunc='silu', actf=[1,1], affinef=2, norm_type='gnorm', norm_type1='gnorm', affine=1, actinada=0, init_zero=0, **kwargs
    ):
        super().__init__()
        self.in_channels = in_channels
        self.out_channels = out_channels
        self.emb_channels = emb_channels

        self.dropout = dropout
        self.skip_scale = skip_scale
        self.adaptive_scale = adaptive_scale
        self.blockconfig = blockconfig
        self.affinef = affinef
        self.norm_type = norm_type
        self.norm_type1 = norm_type1
        self.layernorm_affine = affine
        self.actinada = actinada
        self.init_zero = init_zero

        if norm_type == 'gnorm':
            self.norm0 = GroupNorm(num_channels=in_channels, eps=eps, num_groups=kwargs.get('num_groups', 32), min_channels_per_group=kwargs.get('min_channels', 4))


        self.conv0 = nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=3, padding=1)
        self.affine = nn.Sequential(
            nn.SiLU() if actinada else nn.Identity(),
            nn.Linear(in_features=emb_channels, out_features=(in_channels if self.blockconfig else out_channels)*self.affinef, bias=True)
        )

        if self.init_zero:
            nn.init.constant_(self.affine[-1].weight, 0)
            nn.init.constant_(self.affine[-1].bias, 0)

        if norm_type1 == 'gnorm':
            self.norm1 = GroupNorm(num_channels=out_channels, eps=eps)


        self.conv1 = nn.Conv2d(in_channels=out_channels, out_channels=out_channels, kernel_size=3, padding=1)

        self.skip = None
        self.act = nn.GELU if actfunc=='gelu' else nn.SiLU
        self.act0 = self.act() if actf[0] else nn.Identity()
        self.act1 = self.act() if actf[1] else nn.Identity()

        if out_channels != in_channels:
            self.skip = nn.Conv2d(in_channels, out_channels, kernel_size=1)

    def forward(self, x, emb):
        if self.blockconfig == 0:
            orig = x
            x = self.conv0(self.act0(self.norm0(x)))

            params = self.affine(emb).unsqueeze(2).unsqueeze(3).to(x.dtype)
            if self.affinef == 2:
                scale, shift = params.chunk(chunks=2, dim=1)
                gate = 1
            elif self.affinef == 3:
                gate, scale, shift = params.chunk(chunks=3, dim=1)
            x = self.act1(torch.addcmul(shift, self.norm1(x), scale + 1))


            x = self.conv1(F.dropout(x, p=self.dropout, training=self.training))

            x = (gate*x).add_(self.skip(orig) if self.skip is not None else orig)
            x = x * self.skip_scale

        elif self.blockconfig == 1:
            orig = x

            params = self.affine(emb).unsqueeze(2).unsqueeze(3).to(x.dtype)
            if self.affinef == 2:
                scale, shift = params.chunk(chunks=2, dim=1)
                gate = 1
            elif self.affinef == 3:
                gate, scale, shift = params.chunk(chunks=3, dim=1)
            x = self.conv0(self.act0(torch.addcmul(shift, self.norm0(x), scale + 1)))
            
            x = self.act1(self.norm1(x))
        
            x = self.conv1(F.dropout(x, p=self.dropout, training=self.training))
            x = (gate*x).add_(self.skip(orig) if self.skip is not None else orig)
            x = x * self.skip_scale
        else:
            raise NotImplementedError()
        return x
    

class U_Block(nn.Module):
    def __init__(self, input_size, hidden_size, input_chans=None, **kwargs):
        super().__init__()
        self.conv = UNetBlock(input_chans if input_chans else hidden_size, hidden_size, emb_channels=hidden_size, **kwargs)

    def forward(self, x, c):
        return self.conv(x, c)


class DiC(nn.Module):
    """
    DIFFUSION CONVOLUTION MODEL: DiC.
    """
    def __init__(
        self,
        input_size=32,
        in_channels=4,
        hidden_size=1152,
        depth=[2*2,5*2,8*2,5*2,2*2],
        num_heads=16,
        mlp_ratio=4,
        class_dropout_prob=0.1,
        num_classes=1000,
        learn_sigma=True,
        rep=1,
        ffn_type='basic',
        mult_channels=[1,2,4,2,2],
        skip_stride=1,
        **kwargs
    ):
        super().__init__()
        self.skip_stride = skip_stride
        self.learn_sigma = learn_sigma
        self.in_channels = in_channels
        self.out_channels = in_channels * 2 if learn_sigma else in_channels
        self.num_heads = num_heads

        self.levels = 3

        if len(depth) == 3:
            depth = depth + [depth[1]+1, depth[0]+1]
        elif len(depth) == 4:
            depth = depth + [depth[2]+1, depth[1]+1, depth[0]+1]
            self.levels = 4
        elif len(depth) == 7:
            self.levels = 4
        assert depth[:self.levels] == depth[-self.levels:][::-1]
        if len(mult_channels) == 3:
            mult_channels = mult_channels + mult_channels[:-1][::-1]
        elif len(mult_channels) == 4:
            mult_channels = mult_channels + mult_channels[:-1][::-1]


        self.x_embedder = OverlapPatchEmbed(in_channels, hidden_size*mult_channels[0], bias=True)

        self.t_embedder_ls = nn.ModuleList([TimestepEmbedder(hidden_size*mult) for mult in mult_channels[:self.levels]])
        self.y_embedder_ls = nn.ModuleList([LabelEmbedder(num_classes, hidden_size*mult, class_dropout_prob) for mult in mult_channels[:self.levels]])

        self.enc_blocks = nn.ModuleList()
        self.lat_blocks = nn.ModuleList()
        self.dec_blocks = nn.ModuleList()
        self.downs = nn.ModuleList()
        self.ups = nn.ModuleList()
        self.reduce_chans = nn.ModuleList()

        stages = self.levels - 1

        # encoder
        for level_idx, mult, next_mult in zip(range(stages), mult_channels[:stages], mult_channels[1:stages+1]):
            channel_size = int(hidden_size * mult)
            self.enc_blocks.append(nn.ModuleList([
                U_Block(input_size//(2**level_idx), channel_size, **kwargs) for _ in range(depth[level_idx])
            ]))
            self.downs.append(Downsample(channel_size, hidden_size * next_mult))


        # latent
        channel_size = int(hidden_size * mult_channels[stages])
        self.lat_blocks.append(nn.ModuleList([
            U_Block(input_size//(2**stages), channel_size, **kwargs) for _ in range(depth[stages])
        ]))

        # decoder
        for level_idx, mult, skip_mult in zip(list(range(stages))[::-1], mult_channels[-stages:], mult_channels[:stages][::-1]):
            self.ups.append(Upsample(channel_size, hidden_size * mult))
            in_channel_size = hidden_size * mult + hidden_size * skip_mult
            channel_size = int(hidden_size * mult)
            # self.reduce_chans.append(nn.Conv2d(in_channel_size, channel_size, kernel_size=1, bias=True))
            self.dec_blocks.append(nn.ModuleList([
                U_Block(input_size//(2**level_idx), channel_size, input_chans=in_channel_size if blk_idx%self.skip_stride==0 else None,  **kwargs) for blk_idx in range(depth[-level_idx-1])
            ]))

        # last stage condition need special treatment
        self.last_stage_cond_idx = mult_channels[:self.levels].index(mult_channels[-1])

        self.output = nn.Conv2d(channel_size, channel_size, kernel_size=3, stride=1, padding=1, bias=True)

        self.final_layer = FinalLayer(channel_size, self.out_channels)
        self.initialize_weights()

        # check
        assert len(mult_channels) == len(depth) == self.levels * 2 - 1
    

    def initialize_weights(self):
        # Initialize transformer layers:
        def _basic_init(module):
            if isinstance(module, nn.Linear) or isinstance(module, nn.Conv2d):
                torch.nn.init.xavier_uniform_(module.weight)
                if module.bias is not None:
                    nn.init.constant_(module.bias, 0)
        self.apply(_basic_init)

        # Initialize patch_embed like nn.Linear (instead of nn.Conv2d):
        w = self.x_embedder.proj.weight.data
        nn.init.xavier_uniform_(w.view([w.shape[0], -1]))
        nn.init.constant_(self.x_embedder.proj.bias, 0)

        # Initialize label embedding table:
        for y_embedder in self.y_embedder_ls:
            nn.init.normal_(y_embedder.embedding_table.weight, std=0.02)

        # Initialize timestep embedding MLP:
        for t_embedder in self.t_embedder_ls:
            nn.init.normal_(t_embedder.mlp[0].weight, std=0.02)
            nn.init.normal_(t_embedder.mlp[2].weight, std=0.02)


        # Zero-out adaLN modulation layers
        for blocks in self.enc_blocks:
            for block in blocks:
                try:
                    nn.init.constant_(block.adaLN_modulation[-1].weight, 0)
                except:
                    pass
                try:
                    nn.init.constant_(block.adaLN_modulation[-1].bias, 0)
                except:
                    pass

        for blocks in self.lat_blocks:
            for block in blocks:
                try:
                    nn.init.constant_(block.adaLN_modulation[-1].weight, 0)
                except:
                    pass
                try:
                    nn.init.constant_(block.adaLN_modulation[-1].bias, 0)
                except:
                    pass

        for blocks in self.dec_blocks:
            for block in blocks:
                try:
                    nn.init.constant_(block.adaLN_modulation[-1].weight, 0)
                except:
                    pass
                try:
                    nn.init.constant_(block.adaLN_modulation[-1].bias, 0)
                except:
                    pass

        # Zero-out output layers:
        nn.init.constant_(self.final_layer.adaLN_modulation[-1].weight, 0)
        nn.init.constant_(self.final_layer.adaLN_modulation[-1].bias, 0)
        nn.init.constant_(self.final_layer.out_proj.weight, 0)
        nn.init.constant_(self.final_layer.out_proj.bias, 0)


    def forward(self, x, t, y):

        x = self.x_embedder(x)                   # (N, C, H, W)

        cond_ls = list() # generate various dim of condition


        for idx in range(self.levels):
            t_emb = self.t_embedder_ls[idx](t)    # (N, C, 1, 1)
            if idx == 0: # first stage
                y_emb, y_dropped = self.y_embedder_ls[idx](y, self.training)    # (N, C, 1, 1)
            else:
                y_emb, _ = self.y_embedder_ls[idx](y_dropped, False)    # (N, C, 1, 1)
            cond_ls.append(t_emb + y_emb)
        
        # last one need special processing
        c_ls = cond_ls + cond_ls[1:-1][::-1] + [cond_ls[self.last_stage_cond_idx]]

        skip = list()
        stage_idx = 0

        # encoder: first infer, then downsample
        for idx, stage in enumerate(self.enc_blocks):
            for blk_idx, block in enumerate(stage):
                x = block(x, c_ls[stage_idx])
                if (len(stage)-1-blk_idx) % self.skip_stride == 0:
                    skip.append(x)
                
            stage_idx += 1
            x = self.downs[idx](x)

        
        for idx, stage in enumerate(self.lat_blocks):
            for block in stage:
                x = block(x, c_ls[stage_idx])
            stage_idx += 1

        # decoder: first upsample, then merge skip, then infer
        for idx, stage in enumerate(self.dec_blocks):
            x = self.ups[idx](x)
            # x = torch.cat([x, skip.pop()], 1)
            # x = self.reduce_chans[idx](x)
            for blk_idx, block in enumerate(stage):
                if blk_idx % self.skip_stride == 0:
                    x = block(torch.cat([x, skip.pop()], 1), c_ls[stage_idx])
                else:
                    x = block(x, c_ls[stage_idx])
            stage_idx += 1

        # output
        x = self.output(x)

        x = self.final_layer(x, c_ls[stage_idx-1]) # (N, T, patch_size ** 2 * out_channels) # stick to last stage

        return x

    def forward_with_cfg(self, x, t, y, cfg_scale):
        # https://github.com/openai/glide-text2im/blob/main/notebooks/text2im.ipynb
        half = x[: len(x) // 2]
        combined = torch.cat([half, half], dim=0)
        model_out = self.forward(combined, t, y)
        # For exact reproducibility reasons, we apply classifier-free guidance on only
        # three channels by default. The standard approach to cfg applies it to all channels.
        # This can be done by uncommenting the following line and commenting-out the line following that.
        # eps, rest = model_out[:, :self.in_channels], model_out[:, self.in_channels:]
        eps, rest = model_out[:, :3], model_out[:, 3:]
        cond_eps, uncond_eps = torch.split(eps, len(eps) // 2, dim=0)
        half_eps = uncond_eps + cfg_scale * (cond_eps - uncond_eps)
        eps = torch.cat([half_eps, half_eps], dim=0)
        return torch.cat([eps, rest], dim=1)
    

DiC_default = partial(DiC, 
                      block_type='unetblock', 
                      mult_channels=[1,2,4,2,1], 
                      actf=[1,1], 
                      norm_type='gnorm', 
                      norm_type1='gnorm', 
                      actinada=1, 
                      affinef=3,
                      actfunc='gelu',
                      affine=0,
                      blockconfig=0,
                      num_groups=32,
                      min_channels=4,
                      skip_stride=3,
                    )

def DiC_H(**kwargs):
    return DiC_default(depth=[14,14,10,14,14], hidden_size=384, **kwargs)

def DiC_XL(**kwargs):
    return DiC_default(depth=[7,7,8,7,7], hidden_size=384, **kwargs)

def DiC_B(**kwargs):
    return DiC_default(depth=[6,6,5,6,6], hidden_size=192, **kwargs)

def DiC_S(**kwargs):
    return DiC_default(depth=[6,6,5,6,6], hidden_size=96, **kwargs)

DiC_models = {
    'DiC-S': DiC_S,
    'DiC-B': DiC_B,
    'DiC-XL': DiC_XL,
    'DiC-H': DiC_H,
}


if __name__=="__main__":
    from torchprofile import profile_macs
    import warnings


    model = DiC_XL()
    # model.load_state_dict(torch.load('path/to/weight', map_location='cpu'))

    model.cuda()
    model.eval()

    inputs = torch.rand(1, 4, 32, 32).cuda()
    t = torch.ones(1).int().cuda()
    y = torch.ones(1).int().cuda()
    
    model(inputs, t, y)
    out = model(inputs, t, y)

    flops = profile_macs(model, (inputs, t, y))
    print(f'FLOPS: {flops/1e9:.2f} G')

    params = 0
    for P in model.parameters():
        params += P.numel()

    print(f'PARAMS: {params/1e6:.2f} M')


    model.train()
    print(f"output : {out.size()}")

    # backward test
    out = model(inputs, t, y)
    gt = torch.rand(1, 8, 32, 32).cuda()

    loss = torch.mean(out-gt)
    loss.backward()